import os
import subprocess
import psutil
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CHAT_ID = os.getenv("CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
AUTH_DURATION = timedelta(minutes=5)
SESSIONS = {}  # user_id: expiry_datetime

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

def send_usage_and_disk():
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /usage
        usage_message = get_system_usage()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /disk
        disk_message = get_disk_usage()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        bot.send_message(CHAT_ID, usage_message)
        bot.send_message(CHAT_ID, disk_message)
        print("Messages sent to chat")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    except Exception as e:
        print(f"Error in sending messages: {e}")

def get_system_usage():
    cpu_percent = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory()
    ram_used = ram.used / (1024 ** 3)
    ram_total = ram.total / (1024 ** 3)
    ram_percent = ram.percent

    return (
        f"üìä <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"
        f"üß† CPU: <b>{cpu_percent}%</b>\n"
        f"üíæ RAM: <b>{ram_used:.2f} GB</b> / <b>{ram_total:.2f} GB</b> ({ram_percent}%)"
    )

def get_disk_usage():
    result = subprocess.run(["df", "-h"], capture_output=True, text=True)
    return f"<pre>{result.stdout}</pre>"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(send_usage_and_disk, 'interval', hours=1)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

async def main():
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    # –ó–∞–ø—É—Å–∫ polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º event loop –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())